# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dM8J6gMZvEnChpd0OnbgHrBpeqD21Meg
"""

!pip install Pillow

from PIL import Image
import matplotlib.pyplot as plt

def encrypt_image(image_path, key):
    # Open the image
    img = Image.open("/content/1140x641.jpg")
    width, height = img.size

    # Encrypt each pixel
    encrypted_pixels = []
    for y in range(height):
        for x in range(width):
            # Get the RGB values of the pixel
            pixel = img.getpixel((x, y))
            # Apply XOR encryption with the key to each channel (R, G, B)
            encrypted_pixel = tuple([(p ^ key) for p in pixel])
            encrypted_pixels.append(encrypted_pixel)

    # Create a new image with the encrypted pixels
    encrypted_img = Image.new(img.mode, img.size)
    encrypted_img.putdata(encrypted_pixels)
    encrypted_img.save("encrypted_image.png")
    print("Image encrypted successfully.")
    return encrypted_img

def decrypt_image(encrypted_image_path, key):
    # Open the encrypted image
    encrypted_img = Image.open(encrypted_image_path)
    width, height = encrypted_img.size

    # Decrypt each pixel
    decrypted_pixels = []
    for y in range(height):
        for x in range(width):
            # Get the RGB values of the pixel
            encrypted_pixel = encrypted_img.getpixel((x, y))
            # Apply XOR decryption with the same key to each channel (R, G, B)
            decrypted_pixel = tuple([(p ^ key) for p in encrypted_pixel])
            decrypted_pixels.append(decrypted_pixel)

    # Create a new image with the decrypted pixels
    decrypted_img = Image.new(encrypted_img.mode, encrypted_img.size)
    decrypted_img.putdata(decrypted_pixels)
    decrypted_img.save("decrypted_image.png")
    print("Image decrypted successfully.")
    return decrypted_img

# Example usage:
def main():
    image_path = "example_image.png"
    key = 123  # Key for encryption and decryption

    # Encrypt the image
    encrypted_img = encrypt_image(image_path, key)

    # Decrypt the encrypted image
    decrypted_img = decrypt_image("encrypted_image.png", key)

    # Load the original image
    original_img = Image.open("/content/1140x641.jpg")

    # Visualize the images
    fig, axs = plt.subplots(1, 3, figsize=(12, 4))
    axs[0].imshow(original_img)
    axs[0].set_title('Original Image')
    axs[0].axis('off')

    axs[1].imshow(encrypted_img)
    axs[1].set_title('Encrypted Image')
    axs[1].axis('off')

    axs[2].imshow(decrypted_img)
    axs[2].set_title('Decrypted Image')
    axs[2].axis('off')

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()

